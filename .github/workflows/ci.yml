name: CI

# https://github.com/orgs/community/discussions/26276
on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/ci.yml'
      - 'holdem/appsrc/**'
      - 'holdem/libsrc/**'
      - 'holdem/Makefile'
      - 'holdem/sim/**'
      - 'holdem/src/**'
      - 'holdem/unittests/**'
  pull_request:
    types: [synchronize, opened]
    paths:
      - '.github/workflows/ci.yml'
      - 'holdem/appsrc/**'
      - 'holdem/libsrc/**'
      - 'holdem/Makefile'
      - 'holdem/sim/**'
      - 'holdem/src/**'
      - 'holdem/unittests/**'
  workflow_dispatch:

jobs:
  automated_build:
    name: 'Build (see Makefile)'
    runs-on: 'ubuntu-24.04'
    timeout-minutes: 6
    # This only needs a minute or so, but installing ctags can have unpredicable delays...
    steps:
    - uses: actions/checkout@v5
    - name: Install ctags (needed by Makefile `tags` target)
      run: sudo apt-get update && sudo apt-get install -y universal-ctags
    - name: Must compile successfully
      run: cd holdem && make SHELL="$SHELL -x"

  automated_tests:
    name: 'Test (see holdem/unittests/main.cpp)'
    runs-on: 'ubuntu-24.04'
    timeout-minutes: 8
    steps:
    - uses: actions/checkout@v5
    - name: Extract opening book (speedup unit test runtime)
      run: |
        mkdir -v -p ~/pokeroo-run/lib/holdemdb
        unzip holdem/holdemdb.zip -d ~/pokeroo-run/lib/holdemdb/
        # ~/pokeroo-run/lib/holdemdb ← is because of the runtime path used in the `test` target of the Makefile
    - name: Must pass unit tests
      run: cd holdem && make test
    - name: We need llvm-profdata
      run: sudo apt-get update && sudo apt-get install -y llvm
    - name: clang coverage report
      run: |
        cd holdem
        # echo /Library/Developer/CommandLineTools/usr/bin/llvm-{profdata,cov}
        llvm-profdata merge -sparse -o /tmp/code_coverage.llvm/combined.profdata /tmp/code_coverage.llvm/unittests*.profraw
        llvm-cov show bin/unittests_clang -instr-profile=/tmp/code_coverage.llvm/combined.profdata -format=html -output-dir=/tmp/code_coverage.llvm/html
        cd /tmp/code_coverage.llvm/
        tar -cv html | xz -vv -z -9 -e > "/tmp/code_coverage.llvm/report-${RUNNER_NAME}-$(hostname)_${GITHUB_DESCRIPTION}.${GITHUB_SHA}.${GITHUB_HEAD_REF}_llvm-cov_html.tar.xz"
    - name: Upload opening book zip
      uses: actions/upload-artifact@v4
      with:
        name: report-${{ runner.name }}_${{ github.description }}.${{ github.sha }}.${{ endsWith(github.ref_name, '/merge') && github.head_ref || github.ref_name }}_llvm-cov
        path: /tmp/code_coverage.llvm/report-*_llvm-cov_html.tar.xz
        # include-hidden-files: false by default
        if-no-files-found: error
        overwrite: true
        compression-level: 0
        retention-days: 5
  spot_check_db:
    name: 'Sanity check database generation'
    runs-on: 'ubuntu-24.04'
    timeout-minutes: 45
    steps:
    - uses: actions/checkout@v5
    - name: "make db (trigger bin/regenerate_opening_book_selftest for GITHUB_ACTIONS=truw)"
      # TODO(from joseph): If time permits, also AA (5049) + 72x (322) + Q7x (4023)
      env:
        HOLDEMDB_PATH: /tmp/opening_book_selftest
      run: cd holdem && make db && mkdir -vp /tmp/opening_book_selftest && echo -4847 -1 -5131 -3733 | tr ' ' "\n" | xargs -P "$(sh ../n_threads_minus_1.sh)" -n 1 bin/regenerate_opening_book_selftest
      # ~781s for AKx (48,47) is the slowest, try to run first on the performance core (even in Github Actions this seems to be a thing?)
      # ~389s for 22 (0, 1)
      # ~266s for A9S (51, 51-4*5)
      # ~261s for JTS (37,33)
    - name: "Extract comparison DB (A9S, AKx, JTS, 22x) into hexdump & JSON // See `spot_check_regression_test` in unittests/regenerate_opening_book.cpp"
      run: |
        mkdir -v -p ~/pokeroo-run/lib/holdemdb
        unzip "holdem/holdemdb.zip" -d ~/pokeroo-run/lib/holdemdb/

        mkdir -p /tmp/opening_book_json.gold
        echo A9S.holdemC A9S.holdemW AKx.holdemC AKx.holdemW JTS.holdemC JTS.holdemW 22x.holdemC 22x.holdemW | tr ' ' "\n" | xargs -I @ sh -xe -c 'python3 holdem/unittests/holdemjson.py ~/pokeroo-run/lib/holdemdb/@ > /tmp/opening_book_json.gold/@.json'

        # INVARIANT: We now have /tmp/opening_book_json.gold/ which will be compared with the /tmp/opening_book_json.current_ofstream_logs/ generated later below

        cd ~/pokeroo-run/lib/holdemdb
        ls -1 A9S.holdemC A9S.holdemW AKx.holdemC AKx.holdemW JTS.holdemC JTS.holdemW 22x.holdemC 22x.holdemW | sort | xargs -I @ hexdump -C @ > /tmp/opening_book_selftest/gold.txt

    - name: "Parse generated DB into hexdump & JSON"
      run: |
        cd /tmp/opening_book_selftest
        ls -1 *.holdemC *.holdemW | sort | xargs -I @ hexdump -C @ > current.txt

        # INVARIANT: We now have /tmp/opening_book_selftest/gold.txt and /tmp/opening_book_selftest/current.txt that can be compared

        mkdir -p /tmp/opening_book_json.current_ofstream_logs
        mv -v *.json /tmp/opening_book_json.current_ofstream_logs/

        # RESULT: We now have /tmp/opening_book_json.current_ofstream_logs/

    - name: "Compare current(binary)→converted(json) vs. current(json)"
      run: |
        mkdir -p /tmp/opening_book_json.current_extract_from_binary
        ls -1 /tmp/opening_book_selftest/*.holdem{C,W} | xargs -n 1 basename | xargs -I @ sh -xe -c 'python3 holdem/unittests/holdemjson.py /tmp/opening_book_selftest/@ > /tmp/opening_book_json.current_extract_from_binary/@.json'

        diff -urw /tmp/opening_book_json.current_extract_from_binary/ /tmp/opening_book_json.current_ofstream_logs/

    - name: "Compare [ gold(binary)→converted(json) vs. current(json) ] ⬞ && ⬞ [ gold (binary) vs. current (binary) ]"
      run: |
        if diff -uw /tmp/opening_book_selftest/gold.txt /tmp/opening_book_selftest/current.txt; then
          echo 'PASS (binary identical)'
        else
          FAIL_CODE=$?
          diff -rw -U 1 /tmp/opening_book_json.gold/ /tmp/opening_book_json.current_ofstream_logs/ && exit $FAIL_CODE
        fi
