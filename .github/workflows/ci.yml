name: CI

# https://github.com/orgs/community/discussions/26276
on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/ci.yml'
      - '.github/actions/selftest_db/**'
      - 'holdem/appsrc/**'
      - 'holdem/libsrc/**'
      - 'holdem/Makefile'
      - 'holdem/sim/**'
      - 'holdem/src/**'
      - 'holdem/unittests/**'
  pull_request:
    types: [synchronize, opened]
    paths:
      - '.github/workflows/ci.yml'
      - '.github/actions/selftest_db/**'
      - 'holdem/appsrc/**'
      - 'holdem/libsrc/**'
      - 'holdem/Makefile'
      - 'holdem/sim/**'
      - 'holdem/src/**'
      - 'holdem/unittests/**'
  workflow_dispatch:

jobs:
  automated_build:
    name: 'Build (see Makefile)'
    runs-on: 'ubuntu-24.04'
    timeout-minutes: 11
    # Installing ctags can take anywhere from 1 minute to 6+ minutes!!
    steps:
    - uses: actions/checkout@v5
    - name: Install ctags (needed by Makefile `tags` target)
      run: sudo apt-get update && sudo apt-get install -y universal-ctags
    - name: Must compile successfully
      timeout-minutes: 1
      run: cd holdem && make SHELL="$SHELL -x"
    - name: "…but `-D DEBUG_TRACE_SEARCH` and `-D NO_LOG_FILES` should also build without issues"
      timeout-minutes: 3
      run: |
        mkdir -v holdem/clang_plist
        cd holdem/clang_plist
        set -x
        set -e
        # It seems that `clang++ --analyze` creates a lot of `*.plist` files?
        clang++ -Wl,-z,defs -o /dev/null -Werror -D NO_LOG_FILES -I../src ../src/*.cpp ../appsrc/*.cpp
        clang++ --analyze -Werror -D DEBUG_TRACE_SEARCH -I../src ../src/*.cpp ../libsrc/interfaceC.cpp 2> static_analysis_errors.txt
        # EX_DATAERR
        (test -s static_analysis_errors.txt) && (echo "clang++ --analyze also generates warnings, but they that don't fall under -Werror" && cat static_analysis_errors.txt && exit 65) || (echo 'clang++ --analyze OK')

  automated_tests:
    name: 'Test (see holdem/unittests/main.cpp)'
    runs-on: 'ubuntu-24.04'
    timeout-minutes: 12
    # We have to assume that apt-get calls can sometimes take 6+ minutes
    steps:
    - uses: actions/checkout@v5
    - name: Extract opening book (speedup unit test runtime)
      run: |
        mkdir -v -p ~/pokeroo-run/lib/holdemdb
        cd holdem
        unzip "$(make echoreleasearchive | tail -n 1)" -d ~/pokeroo-run/lib/holdemdb/
        #  ^^^   e.g. >>> `unzip holdemdb_clang.zip -d ~/pokeroo-run/lib/holdemdb/`
        # ~/pokeroo-run/lib/holdemdb ← is because of the runtime path used in the `test` target of the Makefile
    - name: Must pass unit tests
      timeout-minutes: 5
      run: cd holdem && make test
    - name: We need llvm-profdata
      run: sudo apt-get update && sudo apt-get install -y llvm
      # echo /Library/Developer/CommandLineTools/usr/bin/llvm-{profdata,cov}
    - name: clang coverage report
      run: |
        cd holdem
        llvm-profdata merge -o /tmp/code_coverage.llvm/combined.profdata /tmp/code_coverage.llvm/unittests*.profraw
        llvm-cov show bin/unittests_clang -instr-profile=/tmp/code_coverage.llvm/combined.profdata -format=html -output-dir=/tmp/code_coverage.llvm/html
        cd /tmp/code_coverage.llvm/
        tar -cv html | xz -vv -z -9 -e > "/tmp/code_coverage.llvm/report-${RUNNER_NAME}-$(hostname)_${GITHUB_DESCRIPTION}.${GITHUB_SHA}.${GITHUB_HEAD_REF}_llvm-cov_html.tar.xz"
    - name: Upload opening book zip
      uses: actions/upload-artifact@v4
      with:
        name: report-${{ runner.name }}_${{ github.description }}.${{ github.sha }}.${{ endsWith(github.ref_name, '/merge') && github.head_ref || github.ref_name }}_llvm-cov
        path: /tmp/code_coverage.llvm/report-*_llvm-cov_html.tar.xz
        # include-hidden-files: false by default
        if-no-files-found: error
        overwrite: true
        compression-level: 0
        retention-days: 5
  self_test_db1:
    name: Self-test AKx 22x JTS
    runs-on: 'ubuntu-24.04'
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v5
    - uses: ./.github/actions/selftest_db
      with:
        name_pockets: 'AKx.22x.JTS'
        self_test_args: '-4847 -1 -3733'
  self_test_db2:
    name: Self-test 42x KKx T3S
    runs-on: 'ubuntu-24.04'
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v5
    - uses: ./.github/actions/selftest_db
      with:
        name_pockets: '42x.KKx.T3S'
        self_test_args: '-310 -4546 -3507'
  spot_check_db:
    runs-on: 'ubuntu-24.04'
    #           42x (3, 10) ideally one of 54S 55x 76S 98x [T3S] T6S J5S J9S QJS K2S KTx A5S also?
    # ~781s for AKx (48,47) is the slowest, try to run first on the performance core (even in Github Actions this seems to be a thing?)
    #           KK (45,46)
    # ~389s for 22 (0, 1)
    #           T3S (35,07)
    # ~261s for JTS (37,33)
    # TODO(from joseph): If time permits, also AA (5049) + 72x (322) + Q7x (4023) + A9S (51, 51-4*5)
    # ~266s for A9S (51, 51-4*5)
    needs: [self_test_db1, self_test_db2]
    name: Assert no anomalies in generated opening book
    timeout-minutes: 1
    steps:
    - uses: actions/checkout@v5
    - name: "[EXPECTED] define expected results to be: T3S, AKx, JTS, 22x, KKx, 42x"
      run: echo T3S.holdemC T3S.holdemW AKx.holdemC AKx.holdemW JTS.holdemC JTS.holdemW 22x.holdemC 22x.holdemW KKx.holdemC KKx.holdemW 42x.holdemC 42x.holdemW | tr ' ' "\n" | sort | tee /tmp/opening_book_json-test_cases.txt
    - name: "Collect data from each `make db`"
      uses: actions/download-artifact@v5
      with:
        path: /tmp/opening_book_selftest
        pattern: openingbook_selftest-*
        merge-multiple: true
    - name: "[EXPECTED] write expected DB as JSON // See `spot_check_regression_test` in unittests/regenerate_opening_book.cpp"
      run: |
        mkdir -p /tmp/opening_book_json.gold

        mkdir -v -p ~/pokeroo-run/lib/holdemdb
        cd holdem
        unzip holdemdb.zip -d ~/pokeroo-run/lib/holdemdb/

        cat /tmp/opening_book_json-test_cases.txt | xargs -I @ sh -xe -c 'python3 unittests/holdemjson.py ~/pokeroo-run/lib/holdemdb/@ > /tmp/opening_book_json.gold/@.json'

        # INVARIANT: We now have /tmp/opening_book_json.gold/ which will be compared with the /tmp/opening_book_json.current_ofstream_logs/ generated below

    - name: "[ACTUAL] parse actual DB into JSON"
      run: |
        mkdir -v -p /tmp/opening_book_json.current_ofstream_logs
        mv -v /tmp/opening_book_selftest/*.json /tmp/opening_book_json.current_ofstream_logs/

        # INVARIANT: We now have /tmp/opening_book_json.current_ofstream_logs/ which cab be compared against the /tmp/opening_book_json.gold/ from above

    - name: "Compare current(binary)→converted(json) vs. current(json)"
      run: |
        mkdir -v -p /tmp/opening_book_json.current_extract_from_binary
        ls -1 /tmp/opening_book_selftest/*.holdem{C,W} | xargs -n 1 basename | xargs -I @ sh -xe -c 'python3 holdem/unittests/holdemjson.py /tmp/opening_book_selftest/@ > /tmp/opening_book_json.current_extract_from_binary/@.json'

        diff -urw /tmp/opening_book_json.current_extract_from_binary/ /tmp/opening_book_json.current_ofstream_logs/

    - name: "Compare [ gold (binary) vs. current (binary) ] ⬞ && ⬞ [ gold(binary)→converted(json) vs. current(json) ]"
      run: |
        cd /tmp/opening_book_selftest
        ls -1 *.holdemC *.holdemW | sort > /tmp/opening_book_json-actual_filenames.txt

        if diff -uw /tmp/opening_book_json-test_cases.txt /tmp/opening_book_json-actual_filenames.txt; then
          echo 'Proceed'
        else
          FAIL_CODE=$?

          echo 'The wrong test files were generated. ABORT.' 1>&2
          exit $FAIL_CODE
        fi

        echo '::group::hexdump ∀ /tmp/opening_book_selftest → /tmp/opening_book_selftest/current.txt'
        cat /tmp/opening_book_json-actual_filenames.txt | xargs -I @ sh -c 'echo @ start ↓ && hexdump -C @ && echo @ end ↑' | tee current.txt
        echo '::endgroup::'

        echo '::group::hexdump ⊷ holdem/holdemdb_….zip → /tmp/opening_book_selftest/gold.txt'
        cd ~/pokeroo-run/lib/holdemdb
        cat /tmp/opening_book_json-test_cases.txt | xargs -I @ sh -c 'echo @ start ↓ && hexdump -C @ && echo @ end ↑' | tee /tmp/opening_book_selftest/gold.txt
        echo '::endgroup::'

        # INVARIANT: We now have /tmp/opening_book_selftest/gold.txt and /tmp/opening_book_selftest/current.txt that can be compared

        if diff -w -U 15 /tmp/opening_book_selftest/gold.txt /tmp/opening_book_selftest/current.txt; then
          echo 'PASS (binary identical)'
        else
          FAIL_CODE=$?

          diff -rw -U 1 /tmp/opening_book_json.gold/ /tmp/opening_book_json.current_ofstream_logs/ && exit $FAIL_CODE
        fi
