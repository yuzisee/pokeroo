name: CI

# https://github.com/orgs/community/discussions/26276
on:
  push:
    branches:
      - master
    paths:
      - '.github/workflows/ci.yml'
      - 'holdem/appsrc/**'
      - 'holdem/libsrc/**'
      - 'holdem/Makefile'
      - 'holdem/sim/**'
      - 'holdem/src/**'
      - 'holdem/unittests/**'
  pull_request:
    types: [synchronize, opened]
    paths:
      - '.github/workflows/ci.yml'
      - 'holdem/appsrc/**'
      - 'holdem/libsrc/**'
      - 'holdem/Makefile'
      - 'holdem/sim/**'
      - 'holdem/src/**'
      - 'holdem/unittests/**'
  workflow_dispatch:

jobs:
  automated_build:
    name: 'Build (see Makefile)'
    runs-on: 'ubuntu-24.04'
    timeout-minutes: 6
    # This only needs a minute or so, but installing ctags can have unpredicable delays...
    steps:
    - uses: actions/checkout@v5
    - name: Install ctags (needed by Makefile `tags` target)
      run: sudo apt-get update && sudo apt-get install -y universal-ctags
    - name: Must compile successfully
      run: cd holdem && make SHELL="$SHELL -x"
    - name: "…but `-D DEBUG_TRACE_SEARCH` and `-D NO_LOG_FILES` should also build without issues"
      run: |
        mkdir -v holdem/clang_plist
        cd holdem/clang_plist
        set -x
        set -e
        # It seems that `clang++ --analyze` creates a lot of `*.plist` files?
        clang++ -Wl,-z,defs -o /dev/null -Werror -D NO_LOG_FILES -I../src ../src/*.cpp ../appsrc/*.cpp
        clang++ --analyze -Werror -D DEBUG_TRACE_SEARCH -I../src ../src/*.cpp ../libsrc/interfaceC.cpp 2> static_analysis_errors.txt
        # EX_DATAERR
        (test -s static_analysis_errors.txt) && (echo "clang++ --analyze also generates warnings, but they that don't fall under -Werror" && cat static_analysis_errors.txt && exit 65) || (echo 'clang++ --analyze OK')

  automated_tests:
    name: 'Test (see holdem/unittests/main.cpp)'
    runs-on: 'ubuntu-24.04'
    timeout-minutes: 8
    steps:
    - uses: actions/checkout@v5
    - name: Extract opening book (speedup unit test runtime)
      run: |
        mkdir -v -p ~/pokeroo-run/lib/holdemdb
        unzip holdem/holdemdb_clang.zip -d ~/pokeroo-run/lib/holdemdb/
        # ~/pokeroo-run/lib/holdemdb ← is because of the runtime path used in the `test` target of the Makefile
    - name: Must pass unit tests
      run: cd holdem && make test
    - name: We need llvm-profdata
      run: sudo apt-get update && sudo apt-get install -y llvm
      # echo /Library/Developer/CommandLineTools/usr/bin/llvm-{profdata,cov}
    - name: clang coverage report
      run: |
        cd holdem
        llvm-profdata merge -o /tmp/code_coverage.llvm/combined.profdata /tmp/code_coverage.llvm/unittests*.profraw
        llvm-cov show bin/unittests_clang -instr-profile=/tmp/code_coverage.llvm/combined.profdata -format=html -output-dir=/tmp/code_coverage.llvm/html
        cd /tmp/code_coverage.llvm/
        tar -cv html | xz -vv -z -9 -e > "/tmp/code_coverage.llvm/report-${RUNNER_NAME}-$(hostname)_${GITHUB_DESCRIPTION}.${GITHUB_SHA}.${GITHUB_HEAD_REF}_llvm-cov_html.tar.xz"
    - name: Upload opening book zip
      uses: actions/upload-artifact@v4
      with:
        name: report-${{ runner.name }}_${{ github.description }}.${{ github.sha }}.${{ endsWith(github.ref_name, '/merge') && github.head_ref || github.ref_name }}_llvm-cov
        path: /tmp/code_coverage.llvm/report-*_llvm-cov_html.tar.xz
        # include-hidden-files: false by default
        if-no-files-found: error
        overwrite: true
        compression-level: 0
        retention-days: 5
  spot_check_db:
    name: 'Sanity check database generation'
    runs-on: 'ubuntu-24.04'
    timeout-minutes: 45
    steps:
    - uses: actions/checkout@v5
    - name: "make db (trigger bin/regenerate_opening_book_selftest for GITHUB_ACTIONS=truw)"
      # https://github.com/yuzisee/pokeroo/pull/14
      #   REGRESSIONS found in → 42x 54S 55x 62x 65x 72x 73S 75S 76S 92S 96S 98x T2S T3S T6S T7x J2x J5S J5x J9S Q2x Q6S QJS QQx K2S K3x K7S KTx KKx A2x A5S A5x A6x AAx
      env:
        HOLDEMDB_PATH: /tmp/opening_book_selftest
      # ~781s for AKx (48,47) is the slowest, try to run first on the performance core (even in Github Actions this seems to be a thing?)
      #           42x (3, 10)
      # ~389s for 22 (0, 1)
      #           KK (46,45)
      # ~266s for A9S (51, 51-4*5)
      # ~261s for JTS (37,33)
      # TODO(from joseph): If time permits, also AA (5049) + 72x (322) + Q7x (4023)
      run: cd holdem && make db && mkdir -vp /tmp/opening_book_selftest && echo -4847 -310 -1 -4645 -5131 -3733 | tr ' ' "\n" | xargs -P "$(sh ../n_threads_minus_1.sh)" -n 1 bin/regenerate_opening_book_selftest
    - name: "Extract comparison DB (A9S, AKx, JTS, 22x, KKx, 42x) into JSON // See `spot_check_regression_test` in unittests/regenerate_opening_book.cpp"
      run: |
        mkdir -p /tmp/opening_book_json.gold
        echo A9S.holdemC A9S.holdemW AKx.holdemC AKx.holdemW JTS.holdemC JTS.holdemW 22x.holdemC 22x.holdemW KKx.holdemC KKx.holdemW 42x.holdemC 42x.holdemW | tr ' ' "\n" | sort | tee /tmp/opening_book_json-test_cases.txt

        mkdir -v -p ~/pokeroo-run/lib/holdemdb
        unzip "holdem/holdemdb_clang.zip" -d ~/pokeroo-run/lib/holdemdb/

        cat /tmp/opening_book_json-test_cases.txt | xargs -I @ sh -xe -c 'python3 holdem/unittests/holdemjson.py ~/pokeroo-run/lib/holdemdb/@ > /tmp/opening_book_json.gold/@.json'

        # INVARIANT: We now have /tmp/opening_book_json.gold/ which will be compared with the /tmp/opening_book_json.current_ofstream_logs/ generated later below

    - name: "Parse generated DB into JSON"
      run: |
        mkdir -p /tmp/opening_book_json.current_ofstream_logs
        mv -v *.json /tmp/opening_book_json.current_ofstream_logs/

        # INVARIANT: We now have /tmp/opening_book_json.current_ofstream_logs/

    - name: "Compare current(binary)→converted(json) vs. current(json)"
      run: |
        mkdir -p /tmp/opening_book_json.current_extract_from_binary
        ls -1 /tmp/opening_book_selftest/*.holdem{C,W} | xargs -n 1 basename | xargs -I @ sh -xe -c 'python3 holdem/unittests/holdemjson.py /tmp/opening_book_selftest/@ > /tmp/opening_book_json.current_extract_from_binary/@.json'

        diff -urw /tmp/opening_book_json.current_extract_from_binary/ /tmp/opening_book_json.current_ofstream_logs/

    - name: "Compare [ gold (binary) vs. current (binary) ] ⬞ && ⬞ [ gold(binary)→converted(json) vs. current(json) ]"
      run: |
        cd /tmp/opening_book_selftest
        ls -1 *.holdemC *.holdemW | sort | xargs -I @ sh -c 'echo @ start ↓ && hexdump -C @ && echo @ end ↑' > current.txt'

        cd ~/pokeroo-run/lib/holdemdb
        cat /tmp/opening_book_json-test_cases.txt | xargs -I @ sh -c 'echo @ start ↓ && hexdump -C @ && echo @ end ↑' > /tmp/opening_book_selftest/gold.txt

        # INVARIANT: We now have /tmp/opening_book_selftest/gold.txt and /tmp/opening_book_selftest/current.txt that can be compared

        if diff -w -U 15 /tmp/opening_book_selftest/gold.txt /tmp/opening_book_selftest/current.txt; then
          echo 'PASS (binary identical)'
        else
          FAIL_CODE=$?

          diff -rw -U 1 /tmp/opening_book_json.gold/ /tmp/opening_book_json.current_ofstream_logs/ && exit $FAIL_CODE
        fi
